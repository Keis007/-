import asyncio
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime, timedelta

TOKEN = "7818257770:AAHkSbxTYPOFKzGWieQHkhIUa8lIRMcuuxY"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤
rates_cache = {}
last_update = None

async def fetch_nbrb_rates():
    global last_update, rates_cache
    
    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã (–æ–±–Ω–æ–≤–ª—è–ª–∏—Å—å –º–µ–Ω–µ–µ —á–∞—Å–∞ –Ω–∞–∑–∞–¥), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à
    if last_update and (datetime.now() - last_update) < timedelta(hours=1):
        return rates_cache
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫—É—Ä—Å—ã –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        url = "https://api.nbrb.by/exrates/rates?periodicity=0"
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        data = response.json()
        
        # –û—Ç–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ USD, EUR –∏ RUB
        target_currencies = {'USD', 'EUR', 'RUB'}
        new_rates = {}
        
        for item in data:
            if item['Cur_Abbreviation'] in target_currencies:
                code = item['Cur_Abbreviation']
                new_rates[code] = {
                    'rate': item['Cur_OfficialRate'],
                    'scale': item['Cur_Scale'],
                    'name': item['Cur_Name']
                }
        
        if new_rates:  # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫—É—Ä—Å
            rates_cache = new_rates
            last_update = datetime.now()
            return rates_cache
        return None
    
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API: {e}")
    except Exception as e:
        print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    return None

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    builder = InlineKeyboardBuilder()
    buttons = [
        types.InlineKeyboardButton(text="USD", callback_data="USD"),
        types.InlineKeyboardButton(text="EUR", callback_data="EUR"),
        types.InlineKeyboardButton(text="RUB", callback_data="RUB"),
        types.InlineKeyboardButton(text="–í—Å–µ –∫—É—Ä—Å—ã", callback_data="ALL")
    ]
    builder.add(*buttons)
    builder.adjust(3, 1)  # 3 –∫–Ω–æ–ø–∫–∏ –≤ –ø–µ—Ä–≤–æ–º —Ä—è–¥—É, 1 –≤–æ –≤—Ç–æ—Ä–æ–º
    
    await message.answer(
        "üè¶ <b>–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –ù–ë–†–ë</b>\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )

@dp.callback_query()
async def handle_currency(callback: types.CallbackQuery):
    try:
        rates = await fetch_nbrb_rates()
        
        if not rates:
            await callback.message.edit_text("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –∫—É—Ä—Å–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await callback.answer()
            return
        
        currency = callback.data
        
        if currency == "ALL":
            text = "<b>–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –ù–ë–†–ë:</b>\n"
            for code, data in sorted(rates.items()):
                text += (f"\n{data['name']} ({code}): "
                        f"<b>{data['rate']:.4f} BYN</b> "
                        f"(–∑–∞ {data['scale']} {code})")
            await callback.message.edit_text(text, parse_mode="HTML")
        elif currency in rates:
            data = rates[currency]
            text = (f"<b>{data['name']} ({currency})</b>\n"
                   f"–ö—É—Ä—Å: <b>{data['rate']:.4f} BYN</b>\n"
                   f"–ó–∞: {data['scale']} {currency}\n"
                   f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {last_update.strftime('%d.%m.%Y %H:%M')}")
            await callback.message.edit_text(text, parse_mode="HTML")
        else:
            await callback.message.edit_text("‚ö†Ô∏è –î–∞–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        
        await callback.answer()
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {e}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@dp.message(Command("rates"))
async def cmd_rates(message: types.Message):
    try:
        rates = await fetch_nbrb_rates()
        
        if not rates:
            await message.answer("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –∫—É—Ä—Å–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        text = "<b>–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –ù–ë–†–ë:</b>\n"
        for code, data in sorted(rates.items()):
            text += (f"\n{data['name']} ({code}): "
                    f"<b>{data['rate']:.4f} BYN</b> "
                    f"(–∑–∞ {data['scale']} {code})")
        
        await message.answer(text, parse_mode="HTML")
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ rates: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())